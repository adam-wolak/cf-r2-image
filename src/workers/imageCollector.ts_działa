import { Env } from '../types';
import { extractImageUrls } from '../utils/htmlUtils';
import { ensureImageInR2 } from '../utils/r2Utils';
import { normalizeUrl, addOriginalVersion, removeImageDimensions } from '../utils/imageUtils';

export async function handleRequest(request: Request, env: Env): Promise<Response> {
  console.log('Image Collector: Starting process');
  const url = new URL(request.url);
  const targetUrl = normalizeUrl(url.searchParams.get('url') || env.ORIGIN);
  const baseUrl = new URL(targetUrl).origin;
  console.log(`Processing URL: ${targetUrl}`);

  try {
    const originalResponse = await fetch(targetUrl);
    const html = await originalResponse.text();
    console.log('Image Collector: Extracted HTML');

    let imageUrls = extractImageUrls(html, baseUrl);
    console.log(`Image Collector: Found ${imageUrls.length} image URLs`);

    // Add original versions of images
    const originalVersions = imageUrls.map(addOriginalVersion).filter(Boolean) as string[];
    // Add versions without dimensions
    const noDimensionsVersions = imageUrls.map(removeImageDimensions);
    
    imageUrls = [...new Set([...imageUrls, ...originalVersions, ...noDimensionsVersions])];

    const processedImages = [];

    for (const imageUrl of imageUrls) {
      try {
        await ensureImageInR2(normalizeUrl(imageUrl), env.R2_BUCKET, env);
        processedImages.push(imageUrl);
      } catch (error) {
        console.error(`Error processing image ${imageUrl}:`, error);
      }
    }

    console.log('Image Collector: Finished processing images');

    return new Response(JSON.stringify({
      processedUrl: targetUrl,
      imagesFound: imageUrls.length,
      imagesProcessed: processedImages.length,
      images: processedImages
    }), {
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('Error in handleRequest:', error);
    return new Response(JSON.stringify({ error: 'Internal Server Error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

export default {
  fetch: handleRequest,
};
